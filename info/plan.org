#+TITLE: Plan Karma-Vis

1. 静态页面的部署
   1. 搭建 racket server
   2. static-path 和 dispatch 有冲突。。。
   3. 更改 使用servlet的条件 路径在 servlet 之下
   4. 是不是 serve/servlet 函数里面其他关键字的配置有问题？
      要不然为什么一直出现这种 找不到静态路径文件的问题，明明是全部 static 路径下面的文件都找不到。
   5. 进行 dispatch 和 static-files-path 的 测试

      * 测试 静态文件路径 - 2015年03月03日
        * 实现dispatch 调试， 主要的问题还是 static 路径下面的东西加载不进去。。。。
        * 所有的static路径，都被映射到 static/test.html，看来肯定是dispatch 或者是 static的问题。
        * 另外还有文件加载时的路径问题，还没有搞定。data/json的文件都无法加载。
        * 果然 静态文件，不经过 servlet，只是在静态文件里面出现了错误。 静态文件的关联出现问题。
          不对，是到了 dispatch 里面的 else，然后结果就变成 hello world 了，并不是 static 下面的 test.html
          说明， static-path 根本就没有用，或者是servlet-regexp 范围锁定的太大。
          错误原因： extra-files-paths 路径问题，使用错误，或者是因为 servlet-regexp的问题。
          不知道是加载的哪一个 index.html karma-vis/index.html or karma-vis/static/index.html?
          竟然，加载的是 static里面的 index.html 简直是不知道为什么！！！！  这样的话，static/index.html 里面的各静态文件的路径都需要修改。
          当修改 static/index.html 里面的相对路径以后，可以正确显示静态文件。关键是，这个时候，我还把 servlet-regexp给关闭了。
          如果打开的话？
            默认主页是 karma-vis/index.html, 说明 dispatch 将 static的东西给覆盖掉了。
        * When you use web-server/dispatch with servle/servlet, you almost always want to use the #:servlet-regexp argument with the value "" to capture all top-level requests. However, make sure you don't include an "else" in your rules if you are also serving static files, or else the filesystem server will never see the requests.


1. data json的部署

   1. 几个函数的实现。get-relation/get-karma/set-relation/set-karma
      主要是数据类型之间的换算，首先是将 .json 文件加载到内存中，如果有修改，就回写到文件中，如果没有，就还是原来的。前端使用form来修改set-karma 数据，对于relation数据，先不进行。先修改 karma 数据。 先对前端中的js进行修改实现再说。
      进行加载的时候，还是按照原来的方式进行加载，只是在set-karma的时候，需要后端可以进行修改到file中。
      使用ajax更新json到后端。在 bootbox中使用 ajax 同步json数据。
   2. bootbox
      bootbox中btn的颜色的设置和名字有关系。不同的名字，比如 success会有不同的button颜色。其中btn和className有关
      对于karma中某个实体进行内容编辑的时候，有3个btn，save，edit，以及cancel。弹出对话框时，内容不可编辑，点击edit后，内容可编辑，随后点击save，即可进行保存。save 是对js中变量进行修改，然后当relation修改时，相应的ajax传递到后端。（对于bootbox不熟悉，将edit删除，只有save和cancel两项，内容。）
   3. Ajax 测试
      将bootbox应用到d3中，然后使用bootbox中的save修改json，然后，将json传递到后端。


3. JS前端的优化
